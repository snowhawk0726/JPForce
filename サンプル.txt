※ ファイル「サンプル.txt」を実行する。
※１ 「文法/関数(Function)/関数(Function)/クロージャ(Closure)」 クロージャの例

外側は、関数【
  カウント値は、０。
  内側は、関数【
    カウント値と1を足して、代入する。
    カウント値を返す。
  】。
  内側を返す。
】
外側を実行し、「カウントアップ」に代入する。
※ カウントアップする。(1)
※ カウントアップする。(2)

※２ 「文法/型(Type)と規約(Protocol)/型(Type)/型の要素(Static Member)」例

挨拶は、型であって、【
    型の要素が、【宛名は、「田中」。本文は、算出【「こんにちは、」と宛名と「さん。」を足す】】。
】。
※ 挨拶の本文。(「こんにちは、田中さん。」)
※ 挨拶の要素「宛名」を「佐藤」に設定した挨拶の本文。(「こんにちは、佐藤さん。」)

※３ 文法/規約の準拠方法」例
『通貨表記』は、規約であって、【
    記号は、「文字列」
    コードは、「文字列」
】
ユーロは、型であって、準拠する規約は、『通貨表記』。記号は「€」。コードは「EUR」。
米ドルは、型であって、準拠する規約は、『通貨表記』。記号は「$」。コードは「USD」。
国名は、列挙【米国と、スペインと、英国と、ギリシア、日本】。
表記は、関数であって、【入力が通貨国「国名」。
    通貨国が、
    ・スペインまたは・ギリシアの場合、ユーロから生成し、返す。
    ・米国の場合、米ドルから生成し、返す。
    それ以外は、無を返す。
】
※・ギリシアで表記したコードを表示する。(EUR)
※・スペインで表記した記号を表示する。(€)
※・米国で表記したコードを表示する。(USD)
※・英国で表記したコードを表示する。(『コード』(識別子)が定義されていない。)

※４ 「文法/規約の実装定義(Protocol Extension)」 規約の実装定義の例
Objectは、規約【countは、「算出」。】
Objectは、さらに、型【countは、算出【「エラー：数えることはできない。」】】
Numberは、型【
    準拠する規約は、Object。
    初期化は、【入力はn「数値」。numberはn。】
】
Booleanは、型【
    準拠する規約は、Object。
    初期化は、【入力はb「真偽値」。booleanはb。】
】
Stringは、型【
    準拠する規約は、Object。
    初期化は、【stringは「」】
    初期化は、さらに、【入力はs「文字列」。stringはs。】
    countは、算出【stringの数】
】
Arrayは、型【
    準拠する規約は、Object。
    初期化は、【arrayは配列【】】
    初期化は、さらに、【入力はa「配列」。arrayはa。】
    countは、算出【arrayの数】
】
※ 1でNumberから生成し、count。(「エラー：数えることはできない。」)
※ 真でBooleanから生成し、count。(「エラー：数えることはできない。」)
※「あいうえお」でStringから生成し、count。(5)
※ 配列【1,2,3】でArrayから生成し、count。(3)

※５ 「README/構造表現」
フィボナッチ数は、関数であって、【入力が数字「数値」であり、本体が、
  数字が、
  １の場合、１を返す。
  ２の場合、２を返す。
  それ以外は、【
    数字から１を引き、フィボナッチ数を実行したものと、
    数字から２を引き、フィボナッチ数を実行したものを、
    足す。
  】
】。
※ 1から12まで反復【入力が数字で、数字でフィボナッチ数を実行し、表示する】。

割り切れるは、算出【入力が非除数「数値が」と除数「数値で」。
    非除数を除数で割り、除数を掛け、非除数から引いたものが、0に等しい。
】

※６ FizzBuzz 音読(注；1分45秒ほど音読し、処理は中断できません。)
FizzBuzzは、関数であって、【入力が数「数値」。
    数が15で割り切れる場合、「FizzBuzz」を返す。
    数が3で割り切れる場合、「Fizz」を返す。
    数が5で割り切れる場合、「Buzz」を返す。
    それ以外は、数を返す。
】。
※ 1から100まで反復【入力が数。数でFizzBuzzを実行し、音読する】。

※７　FizzBuzz 表示
FizzBuzz2は、関数であって、【入力が数値「数値」。
    文字列は、「」(空の文字列)。
    数値が3で割り切れる場合、文字列に「Fizz」を足して代入する。
    数値が5で割り切れる場合、文字列に「Buzz」を足して代入する。
    文字列が空である場合、文字列に、数値の文字列(数字)を足して代入する。
    文字列を返す。
】。
※ 1から100まで反復【入力が数。数でFizzBuzz2を実行し、表示する】。

※8 クイックソート
(参考：https://qiita.com/Yuya-Shimizu/items/00ff5fd26200408dc328)
クイックソートは、関数であって、【入力が数列「配列」であり、本体が、
    数列の数が1以下である場合、数列を返す。(並べ替えの必要がない)
    基準は、数列の先頭。数列は、数列の残り。(数列の先頭を基準にする)
    左側は、数列を関数【入力が数で、数が基準以下である】で絞り込む。
    右側は、数列を関数【入力が数で、数が基準より大きい】で絞り込む。
    左側をクイックソートし、左側に代入し、
    右側をクイックソートし、右側に代入する。
    ※「『数列』 = 『左側』 + 配列【『基準』】 + 『右側』」を表示する。
    左側と配列【基準】と右側を足し、返す。
】。
※ 配列【6, 15, 4, 2, 8, 5, 11, 9, 7, 13】をクイックソートし、表示する。
